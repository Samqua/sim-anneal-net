# -*- coding: utf-8 -*-
"""
Created on Thu Jan  4 15:58:41 2018

@author: Samqua
@version: 1.1

A simulated annealing Monte Carlo optimization algorithm for cost functions defined on simple graphs of order N.
Specify the initial coordinates of the nodes (or randomize them) inside a square of arbitrary side length.
The number of simple graphs of order N>25 is an incomprehensibly large number: ~10^98 for N=30, and of course it scales exponentially with N.
The problem of finding the unique graph that optimizes a cost function is therefore computationally intractable if N is large.
Instead, we aspire merely to a near-optimal graph using a probabilistic search algorithm.
The algorithm, denoted perturb() in the code, tweaks a graph until it finds one of higher fitness, and then caches it.
It jumps randomly through the network state space in an attempt to avoid getting stuck in a local fitness maximum.

It does, however, have a nonzero chance (denoted K in the code) to return to the current optimum.
The average radius of the algorithm's orbit in state space is controlled by this parameter K:
- if K is too high, the algorithm will be constrained to a local fitness maximum.
- if K is too low, we could potentially be spending too much time searching an extraneous region of state space.
So there is a goldilocks range of K values for which the algorithm finds a good solution quickly.

The fitness function is defined node-wise: every node has a fitness, and we judge graphs by the sum of all node fitnesses.
Contributions to fitness include:

(1) Degree (total number of connections)
(2) Domination of neighbors (having more connections than the average of those connected to it)
(3) Minimizing the sum of edge costs, where cost is proportional to edge length

Parameters p1, p2, and p3 respectively control the relative weights of these considerations in the fitness function.

"""
#####################################################

import os, sys
import random
#import numpy as np
#import matplotlib.pyplot as plt
import plotly as py
from plotly.graph_objs import *
import networkx as nx
import copy
import datetime
#import math
#import sympy
#import scipy.integrate

if os.getcwd() not in sys.path:
        sys.path.insert(0, os.getcwd())

from distance_matrix import distance_matrix as distance_matrix

#####################################################

start=datetime.datetime.now()
print("START: "+str(start))

side_length=1000
total_population=50000 # currently unused
N=400 # try not to exceed N=300
steps=800 # temperature resolution
tries=7 # number of times to repeat entire algorithm
max_degree=5 # possibly unused
K=0.00001 # small chance to return us to the current fitness maximum, recommended 0.0001 if N~100
p1=80 # 250 recommended
p2=0 # 300 recommended
p3=1 # 1 recommended

def step(x):
        return 1*(x>0)

#"""
#init_coord=[]
#for i in range(0,N):
#        init_coord.append([random.uniform(1,side_length+1),random.uniform(1,side_length+1)]) # coordinates allowed to be floats; ints can be obtained using ceiling and floor functions
#"""
#"""
#Example data:
#init_coord=[[581.791426227322, 980.2823816645615], [204.75003029267714, 399.47965394745523], [734.2910136543942, 959.272398908303], [482.25541188396915, 407.04404493361267], [454.07934038650365, 993.1681823913875], [494.08133543063724, 201.10639908417593], [190.2904832122998, 378.86241146040334], [443.2660649398715, 627.9892016440075], [254.31362954039884, 919.7602962897885], [669.8892302824736, 746.7185902817512], [100.98426350267509, 916.9395915199017], [596.03385724617, 520.4959985521325], [792.5633043803628, 987.4758613729537], [583.6409197972246, 984.9372327761208], [403.9033730058758, 94.64920761501705], [430.24387295293144, 570.8566632868902], [956.7953867526576, 169.7157189341898], [154.4125875017839, 835.0229998213775], [983.422336564179, 335.0586078446084], [754.7434474348257, 526.6270406940486], [893.41566910758, 124.76590866603077], [445.87255944181027, 279.5133187847811], [232.69663703783883, 97.89256958226011], [830.9529511235411, 442.9650809587594], [613.1487038507444, 133.26492951823298], [700.7472233184681, 613.1136190857171], [556.9879495256503, 78.0549831438918], [628.7951843969191, 59.10891920617423], [421.78943283603667, 440.84608112801817], [365.39017591005506, 989.1498689065212], [566.9042846762642, 984.5661169804623], [555.5818251672656, 529.9485169836548], [755.170945655323, 261.3577815224904], [949.8184671843018, 330.52748482601936], [289.03985698616594, 973.597150640252], [581.0810685071121, 312.524755268291], [585.1067198725104, 953.4133094801513], [57.244769642270434, 42.847632693124524], [747.1796601174569, 536.4722876639764], [685.5834866783753, 922.7983334511849], [186.40836703322162, 80.86431504489732], [230.30271698340775, 391.7168356248111], [655.6620130216081, 768.1430685605403], [664.7939120640195, 273.20772687995475], [659.034314341772, 623.6189550417979], [1.0033010907031228, 448.2725476551921], [647.6898038430311, 970.8092041500124], [587.3820733771083, 456.0967742069174], [371.41851049805643, 303.043045852188], [197.0039553870556, 814.8833762160416], [723.1015299593533, 660.2079594435418], [665.3758928359113, 497.523982993188], [747.7998236852278, 924.0968281624811], [753.7781569808496, 497.5651428463399], [664.6573828656484, 46.34453816119044], [23.583270750772154, 834.85660139277], [155.43964588414028, 280.5883076865755], [661.622830848578, 342.6593234321673], [911.6139284586251, 845.5677141288219], [120.31872140107203, 846.3238412423677], [475.19280864187596, 854.1927651876649], [443.38868763856675, 776.0780419205204], [702.5350896648093, 340.81196131246816], [336.9552484975108, 792.8784873223713], [413.92723367490515, 448.77734581211234], [16.569443089199385, 219.90714059648252], [757.2288768732669, 632.6557600111852], [388.1248177977862, 767.0279968711139], [223.28552453219984, 7.118031533171808], [106.12824430883228, 758.357145063579], [949.7020774666419, 604.51546054644], [83.99080877820653, 454.94283901402264], [962.6367699059444, 189.90207785008494], [994.1166296636725, 155.2380336136797], [336.75548394517665, 44.231549405532974], [965.5680936064116, 879.9039833418105], [377.62059342523366, 454.17996138577263], [645.6531403029445, 669.3978978122287], [282.0454448173506, 875.2076352672058], [313.3097394120724, 144.0201668677108], [39.67497949715537, 770.7472296030677], [979.0039479519219, 948.7349513148849], [123.65091366977477, 73.92129131690439], [677.6359560335701, 432.0458842546909], [756.936804683188, 706.1153347902326], [159.75668571349178, 425.3196805549564], [763.5779338253888, 265.5928375486345], [376.98362924549235, 923.2191299939943], [760.5327405830503, 508.92141824153424], [749.77810497677, 733.1829905321282], [506.50534325594873, 51.03647622380336], [694.2104207443042, 494.77777942327606], [525.7589148350738, 531.4187645769891], [844.5045546720521, 453.55945398837747], [398.4682025771131, 787.5361602580505], [962.3085160368572, 58.22275150103273], [260.0385049166625, 492.06537569749366], [161.32611346891446, 7.71372363368572], [184.6148488527195, 227.53501715450187], [173.10596221479037, 465.85734912991825]]
#init_coord=[[51.390451974569004, 53.05785509466193], [49.14165584359783, 146.8451254836828], [49.77478146576224, 251.4333637940573], [45.96102506851682, 348.5915376458483], [49.061059605665456, 445.50060941243817], [48.1948669397621, 553.2179306727243], [51.06064158543821, 648.5411159052207], [45.104062598197416, 753.3328622852479], [47.39474744434592, 849.7653879814725], [46.566952662876055, 953.8834891201307], [147.639226758104, 54.4349358941319], [150.06141288346396, 151.2348416041498], [151.16221472978003, 246.1895563340673], [146.25443842998908, 345.6478979907539], [145.78373421953893, 452.98555357023776], [150.54569691126318, 552.6102777286022], [151.11824384377124, 652.0354402089112], [150.4651978556971, 749.029347747075], [147.43951953412238, 851.2926294929105], [149.1121354339358, 948.9615704649959], [252.16250022530647, 48.98738697247663], [248.20083235290974, 146.07795319539414], [254.61841848044577, 247.8104358959138], [251.32491712077618, 354.90451711306537], [247.49855770586973, 448.776555706275], [247.4083783257337, 550.3689793292201], [249.00768678684292, 654.3123898008972], [246.12380685438035, 746.9979462112171], [246.0533396016232, 846.9612247830444], [254.83041563151252, 947.4084200797603], [348.62426089421757, 50.28105963456282], [347.4367108567776, 150.9779091675569], [352.4844491267927, 249.3229700308212], [352.7710370085297, 347.86991192689305], [347.82277182996063, 447.85189052397953], [351.5615269327489, 548.7020801028244], [350.8192823491157, 651.3375643517271], [348.1532253648808, 753.0601050821563], [346.2813242582326, 848.4634377093687], [345.79619247661947, 946.4035043449518], [449.84550882943347, 45.50905520711152], [450.14756732764715, 149.49676873467885], [446.5641342191065, 250.13282193925474], [447.1004612714774, 347.46753874812134], [451.7106893131284, 445.0874631727785], [453.5121808195043, 553.7925271209951], [452.05741342425824, 653.3321449784409], [449.8504938157442, 751.5529377614105], [450.2082301722313, 850.6093878653212], [446.76214308997675, 953.911300410516], [552.7557028482056, 53.63650060290762], [554.7171662519227, 145.35882260874902], [554.3152792986832, 245.99431593958982], [547.9170393089091, 346.7929455905858], [554.9049192019367, 449.85865640301176], [546.5336032131983, 547.0038255770388], [547.4807126016213, 650.0213745186596], [546.5574130290231, 747.7712950004848], [552.5515926664596, 852.2471295372642], [551.7571377884797, 953.4760311271993], [653.0133261426764, 46.18917381028456], [651.0254188489594, 150.187810729528], [653.3534312307199, 252.754345431395], [649.5697853290479, 353.3177218013996], [653.5123382825556, 454.67860004709405], [648.3657601288407, 547.7599496845454], [652.6817596376823, 654.1019595774205], [647.9867995340564, 749.9038074534925], [649.8342409819643, 846.9124362335988], [645.2827634634967, 945.1208406201125], [752.0561533344245, 50.680486935161674], [750.8985082516243, 149.22426642028017], [749.3676568747896, 250.44533986507582], [748.3461157615677, 354.0278529766888], [747.9444432897923, 452.51103329980975], [749.0994719948033, 552.4705408155813], [749.5592830090118, 646.1163824491675], [746.4932315351766, 750.1589282371176], [749.4040046367329, 845.3557334792797], [751.891813644746, 945.4451234373073], [846.9619633118712, 45.99060766719279], [853.6063090747015, 151.04155539546073], [852.9827326599413, 247.49052766412834], [848.1601947043267, 346.81217999241267], [853.0917224513464, 445.26616502393625], [845.7279488717764, 547.7947302530054], [850.2911603387926, 646.6058610682504], [853.4847540317332, 745.5180301029063], [852.7192597504487, 851.7139293208297], [854.9723635726912, 953.0751799778226], [949.3849788054464, 47.78491287309042], [950.9349776096476, 146.25242493255143], [949.7106238029213, 252.6803445308404], [949.0775344238671, 348.1624420835326], [954.2501080949955, 453.8469048201835], [951.0317881590238, 554.1405935273837], [953.7582383542486, 645.7921188270946], [952.5486567939365, 747.8941655379946], [952.4006541642036, 845.1715758196615], [950.3271396349573, 948.9527170628882]]

init_coord=[[25.22173574682489, 25.463809368645595], [25.356713292891666, 74.83725580051876], [24.892213503771497, 124.67083825351833], [24.811647594631143, 174.64604203342483], [25.45398151014866, 225.48764068404535], [25.226518053591708, 274.62630654483064], [24.948537830756624, 325.37899766193016], [24.91579403642254, 374.66085315701696], [24.701731216279942, 425.3906278854898], [24.91032962992619, 475.0020908345029], [24.60513345039995, 525.0589521777797], [25.291405976303178, 574.8143689756926], [25.246014813089406, 624.7565346333216], [24.58031838095356, 674.7552311489709], [24.690890570102205, 725.353294696176], [24.5661399389239, 774.7830014936335], [24.821713681594595, 824.9141909230813], [24.81135002858323, 874.7744334077302], [25.031673198096257, 925.2015193182126], [24.58509731969619, 975.3240550834599], [75.29291207966929, 24.963801724608274], [74.91371571384957, 74.76855745843982], [74.56174398967536, 124.84192306467487], [74.5878452519763, 175.11295424860614], [74.73198064894723, 224.93487307867755], [74.51908852434022, 275.36686596134047], [75.11920941136651, 325.07384612762064], [75.34517319049799, 375.1607750974445], [74.50412954627096, 424.6104695358243], [74.83554581844577, 475.48730405550975], [75.31470926459079, 525.4366306002124], [75.46200201005882, 574.7224478183089], [74.8576203699997, 624.9178715594367], [74.89162063161972, 674.8860414081184], [74.58763837109097, 724.7260373580666], [74.62322782554631, 775.1637281900815], [75.0235059212356, 824.7004029843818], [74.99681569934408, 874.8177593274598], [74.98038849183246, 925.0969047036738], [75.14095912950899, 974.6990864729124], [125.49896281893699, 25.479363029875365], [124.60733701949195, 75.03213097781304], [125.47209407574826, 125.35506718810619], [124.57741119773767, 174.97181708015844], [124.74617490292398, 224.66955117902216], [125.33195219491489, 274.80554455209125], [124.55937205053468, 325.1926042599181], [125.09237913253274, 375.08481987707484], [124.96078521862249, 425.2394651854618], [125.1176924610521, 474.64817994588896], [125.35033156495778, 525.0924615451343], [125.19645821851623, 575.1522943254282], [124.83901903013843, 624.7148266778291], [124.54053530915691, 675.2082397721832], [125.07546813617925, 725.2911847711348], [124.51964866741214, 775.0460528057722], [125.13157510412819, 824.6954014939324], [124.85109276115212, 875.4463614511626], [124.91753728280469, 924.6116679388821], [124.61343662460227, 975.1548752702622], [174.73025678396965, 24.734379093250194], [175.27541459298158, 75.30920237666552], [175.47945732536618, 124.56120071916158], [174.6893493996542, 175.06810902023233], [175.19977813293494, 224.53165936620192], [174.7918508430009, 274.86486010058866], [174.534917373338, 324.8594864665508], [175.29751813408373, 375.16028131881603], [175.45299656717685, 424.5804233073762], [174.9235642067736, 474.9840598870729], [175.28631553805002, 524.9673758240554], [175.00830122972553, 574.769060279196], [175.47055770614986, 625.0501412949727], [175.02401150414985, 675.2018117641899], [175.18797620229503, 724.6251011347117], [174.64287795827622, 774.8721779874259], [175.33740173039953, 825.3865198043278], [175.19270203042132, 875.1286618078999], [175.36258135369863, 924.6838574494259], [175.0454319387316, 974.7235543159052], [224.89890028699747, 24.7932088434314], [225.4785143287615, 74.84151608823294], [224.8730526276709, 124.51566854774084], [225.1694089081329, 175.49774608793444], [225.47699219388545, 225.30905823694053], [225.4850754518799, 274.8608183360454], [224.97031444835469, 325.19086594064396], [224.9324988793668, 375.471056580706], [224.9139161446461, 424.8096567763937], [224.9610921249474, 475.256734783218], [224.6614951688734, 524.8406788471691], [225.14801769073694, 574.8652292687261], [224.61117324428676, 625.211861039207], [224.89935801633408, 675.4470998065608], [224.89494325669432, 724.843302811099], [224.974694019871, 774.6663696794246], [225.42198009028922, 825.1357623101999], [224.5548358110346, 875.1685416626973], [225.14570714300908, 925.1016104335127], [224.8628502862838, 975.0788678999836], [275.43977010566687, 25.16431417543172], [274.9588055876721, 74.57937671255324], [274.98220229037486, 124.73693520822303], [274.5369429172954, 175.0871707336096], [275.4318993551509, 225.3848424131377], [275.4643178386915, 275.0063708823576], [275.2803645718344, 324.65277263942755], [275.4943353516222, 374.5646528976965], [275.1923220213403, 424.90960987407874], [275.4435482920484, 475.0765874519434], [275.2843140041215, 524.8537692749135], [275.13938356920914, 574.86420543055], [274.739738326441, 624.694286559392], [274.5487391140793, 674.9972948790843], [274.79688720857365, 725.2664782650407], [275.4040072091619, 775.0777104812626], [275.31500579980565, 824.687790974129], [274.72647374446564, 874.5131709712309], [274.7371814300488, 924.5158636366003], [275.49806129364265, 975.301673473436], [325.43564485403357, 24.71751801361085], [324.820637753944, 74.74866980155036], [324.93167276974253, 124.6967741902894], [325.26621478330986, 174.7017288065786], [325.4639060459976, 224.77509082667868], [325.1040705103259, 275.452949499526], [324.6759090369384, 324.9385869482005], [324.93672501204514, 375.4191232434991], [325.1788557768187, 425.3626798408572], [325.08164064411244, 475.2716717870967], [324.890943157399, 525.0887931717294], [324.50364468736126, 575.0495619031917], [324.58731013973426, 624.9860975434991], [325.2707213151024, 674.6261902650347], [324.9678756456709, 725.0063456222791], [325.1230328162406, 774.6943003319567], [324.6748220763052, 825.2361175605946], [325.389717157951, 874.7919739255099], [325.10860722112716, 925.0147980764556], [324.5424931680603, 975.1629449238508], [374.9980777492393, 25.02330125838945], [374.8398354932948, 75.36495535883736], [375.1396300908857, 124.67442662048677], [375.36870789830573, 174.6651757746743], [375.3686095127379, 225.25627669706142], [374.77304959613946, 275.06553074650964], [374.9188652888338, 325.0061914888165], [375.2262043500919, 375.4121802558824], [375.0573531550958, 425.27813472420274], [374.6791212762847, 474.53157693189064], [375.38737020986946, 525.361705297491], [374.81991076525, 575.1525833026532], [375.4808562344056, 625.3041572789837], [374.8089657173525, 675.2427921272805], [375.2889861714166, 724.7966745379687], [374.85307336096406, 774.725593765989], [374.8777795294723, 825.1922156632888], [375.09954204086847, 875.212157980501], [374.8674543430284, 924.5109947502913], [374.7800724209502, 974.9843845268505], [424.9633023306885, 25.274382847656998], [424.60705108250863, 75.42896480364358], [425.41754771286594, 125.14002810702566], [425.4003288834556, 175.13401619692283], [425.14345770845426, 225.43320863140985], [424.6749167901532, 275.4545025745285], [424.57132783094045, 325.42732195805064], [424.998557792809, 374.9730095755551], [424.7154313922029, 424.6233182047299], [424.94525527479703, 474.96743717992126], [425.1890760377331, 524.575518370311], [425.29985013611997, 574.8496674793394], [425.43837789622887, 624.7013850105608], [425.1517323680886, 675.0804422666191], [425.4673408994603, 725.3814427586026], [424.6980395283281, 774.6029259647995], [425.1676408143417, 825.049449196625], [425.37955296316966, 874.52440258732], [425.35689928269414, 924.5020132111797], [425.1034439653591, 974.6662211156349], [474.7961141389807, 24.694876607028903], [474.66064495654166, 75.08786428785034], [474.6130090502883, 124.72356951924073], [475.22558605511193, 174.8120103413434], [475.1112178121486, 225.44296432081583], [475.19546085958217, 275.1522246633256], [474.63936578343214, 325.12111909940813], [474.7386855196997, 375.15957231477836], [475.43793625298093, 424.7162637066156], [474.83561850121805, 475.0174716267201], [474.9984568314222, 524.905550122818], [474.55003540678246, 575.3440069779095], [475.44481354663066, 625.0677822441269], [474.7750830601687, 675.310627747463], [474.760434994197, 725.4150838590367], [475.3733031345301, 775.2508273635586], [474.9826618016925, 824.8438626801025], [474.75337610427573, 874.7516576819703], [475.37426353868733, 925.3446414610074], [474.7298164190886, 974.5351478653445], [524.741080359376, 25.142236338431005], [524.6483397649813, 74.80209843602469], [525.4610257667018, 125.41198000909795], [525.4619559224157, 175.0798294309298], [524.8915343835544, 224.55773363643576], [525.2189367483511, 274.9056182029403], [524.9132174392612, 325.4283840398868], [524.652354928355, 374.794560809213], [525.0035090537211, 424.95970586347875], [525.0234605493335, 475.3316255713205], [524.5324449501616, 525.0394048183002], [524.6234198581253, 575.1583489844487], [525.3586278127636, 625.4484246966999], [524.7691153658822, 675.4031735956918], [524.6682043695575, 724.850976562736], [524.7093450408844, 775.4404396537607], [525.284256965101, 825.4493450529137], [524.6859473722203, 875.4311957756624], [524.7413565475698, 925.2777007122492], [525.314596278287, 974.59283616583], [575.0341008712916, 25.030040763590588], [575.4950918569778, 74.716455229533], [574.8793204849884, 125.02522659914352], [575.4774573985552, 175.0894901591627], [575.4538649448261, 225.22722383384675], [575.2033370105137, 275.3006984727992], [575.2875176243102, 325.3963796689785], [574.7372040061515, 374.9717831332006], [575.359945758738, 425.272661411719], [575.0422079744425, 475.00171437799986], [574.8371222050273, 525.4323184061745], [574.8885512979954, 574.653515768411], [574.8053107838707, 625.186193107076], [574.7733804172487, 675.3506412613921], [575.2204524017944, 725.0464968738781], [575.0699409944104, 775.131743598644], [574.8431241914913, 825.1603981958025], [574.6785226955279, 875.4673573222236], [575.2880518886227, 924.6129667454395], [574.9879337979811, 974.8233784533634], [625.3928201338871, 25.46769039441792], [624.6284708452362, 75.40675468370628], [624.8976729120617, 125.17913324055783], [625.2215741287149, 174.6219011033989], [625.1867147685512, 225.43583467451845], [625.0807597610439, 274.85207104503064], [624.5622453990818, 325.4147040535186], [624.7460012320594, 374.6212657304104], [625.2165862151107, 425.20583896278555], [625.1460484569485, 474.5624241990072], [624.8182925997294, 524.8048857447575], [625.4454356815476, 575.4254338556409], [625.0394202058748, 624.9459988193806], [624.6249070549594, 675.29025208469], [624.918426814446, 724.5046379442995], [625.1068667225767, 774.9889074350494], [624.6956384001389, 825.0458916714789], [625.4317007425274, 874.6360002296859], [625.4815387280244, 924.8812336827142], [624.9308001090562, 974.5463481525113], [674.9031149256699, 24.74135059593801], [675.2476049698046, 74.80802186198896], [675.4420003071604, 125.36157577210288], [675.2162647868041, 174.823930971281], [675.4781006739812, 225.12267833327536], [675.0330082280377, 275.35767264847135], [675.2359741487188, 325.19698366910677], [675.281949692665, 374.9928314828463], [674.779895446207, 424.9446055884793], [674.6631601031927, 474.713484814796], [674.9861933243383, 524.6051060443824], [674.5057842728575, 574.5269789757031], [674.6646625446009, 624.7458769742672], [674.5328079130211, 674.504355856878], [674.622222207789, 725.3259761086638], [675.0600576287334, 774.5537427090273], [675.2288826894686, 824.7773378062608], [675.2884189325778, 875.4873050495261], [675.3167886314772, 924.8482850828814], [674.6462888132081, 975.3224091981801], [724.749896424005, 25.30884768334455], [725.4509369837712, 75.44855745219537], [724.7083347409326, 124.7123487136112], [724.7701995595208, 174.57807854748742], [725.3360975526984, 225.09214369286804], [725.0160335869597, 274.92369561122445], [725.4277334939545, 325.1001002070306], [725.0776015024985, 374.9451894149131], [724.7998494591885, 424.9539548175486], [724.8294182026817, 474.55608892821164], [724.8824229461472, 524.7390611743807], [725.4830856492401, 574.6145573869984], [725.4451533099722, 624.826428361211], [725.1783534084234, 674.7072384093901], [725.0263965312109, 724.9560803901776], [724.6985316879831, 774.7139994391749], [725.4410510930728, 825.3990959741521], [724.6422123388288, 874.7419859781113], [724.8410743403133, 924.7050183850492], [725.2252195826458, 975.0721435666392], [774.609587430243, 24.626055414302353], [774.7159352817866, 74.88264341095767], [775.2223678227082, 124.73395322909194], [774.8187389798285, 175.48448945603548], [775.3053058316882, 225.13668964947723], [774.8447658703294, 275.0819846670216], [775.1732577661448, 324.56086059706666], [774.8432246353568, 374.9726130561991], [774.8401728039463, 425.136625279819], [774.5081951016798, 474.82968451527904], [775.4903028434001, 524.89707125926], [774.5477144040826, 575.3286478911589], [775.1602730179396, 624.6111768363946], [775.3813629443489, 675.2059828133139], [774.9398907369672, 725.4722432905745], [775.4356221889718, 774.8754716192874], [775.1996390728704, 825.0287197898615], [775.2626242389612, 874.6835072812529], [774.744458973241, 925.3581645261365], [774.7751263699397, 975.200860372573], [824.5172760056138, 24.5858139791716], [824.9790888265269, 75.36763666045867], [824.7352841209702, 124.7046901405534], [825.4565877649025, 174.9271613045764], [824.8607446652283, 224.65297045121085], [825.2346180900767, 275.4487549267311], [825.2775434497279, 324.5481843738095], [825.2514541071623, 375.31280882383453], [824.7748947412917, 425.2073123799024], [824.9043237425685, 474.86346105065354], [824.7572032087318, 525.3015358682582], [824.9622563428109, 575.3371768319232], [824.5940165638407, 625.1898519962131], [824.6826136191775, 675.3340236844957], [824.6709897789461, 725.1194573287349], [825.1706977006659, 774.733863222275], [824.9019594739249, 824.984854974012], [824.9286118894179, 875.2941093679266], [825.480051714489, 924.9053933435524], [824.6232732013603, 974.512909777905], [875.2300150039254, 25.033067256409275], [875.0216719200629, 75.00034727406717], [875.2607148845834, 125.33175438769835], [874.7332795599707, 175.28089206829853], [874.5151808291779, 224.8562701632245], [874.5943219110727, 274.6331880279434], [875.2028218442089, 325.26016309446067], [875.3786420030523, 375.1152853678626], [875.3210154484912, 425.1632187582995], [875.1158871385727, 475.1451209451323], [875.2872381255813, 524.643452950711], [874.8962445299004, 575.2089209329457], [874.8655680366522, 624.9703658958425], [875.3882889098794, 674.7339764728902], [875.03226356975, 724.9280646894738], [874.629012161176, 774.920054117312], [874.9982404038185, 825.1702180447911], [875.0044297185019, 874.7094632740254], [874.8133210609894, 924.5846105676638], [875.1162887827395, 975.4630124874543], [924.5980926554207, 25.10007160939597], [925.2996998447788, 75.33143490591021], [925.1561188470436, 125.16457296914314], [925.4913952836217, 175.12930302748467], [925.0486977970759, 224.76432093814216], [925.1305384362923, 274.53759591822126], [924.6204030629603, 324.65192146487453], [925.1459524007167, 375.2573209467501], [925.1301301418124, 425.12092210614327], [924.8350674503578, 475.2584663642923], [924.6305538866021, 524.789090948842], [924.9405494551651, 574.6445537189817], [925.1997815722335, 624.7246796355533], [925.2510208999818, 675.362713867698], [924.518551513542, 725.4924675284755], [924.5419560313222, 774.9496252364082], [924.9221974842271, 825.2388018038495], [924.9379951757033, 874.5310514809564], [925.3629283578343, 925.0364944009151], [925.0455809213004, 975.0923570526475], [974.8049856710614, 24.63095271706985], [974.7328855369541, 74.70902716257811], [974.8557899123368, 124.65414825073775], [975.2081876711571, 174.71868887489677], [974.8493336278893, 225.42579065982164], [975.4800042551568, 275.2031733513638], [974.7930626020219, 324.71632603454333], [974.850733823989, 375.04009136792996], [974.8400447525302, 424.87689828224916], [974.5005030671468, 474.51568095484396], [974.6954313804621, 524.884944043211], [974.9311387189381, 574.5383780925666], [975.4627712156037, 625.2022235306865], [974.7173607120908, 674.8006700462353], [975.3489966839404, 725.2598347408184], [974.50111450393, 775.4164477189987], [974.550795479997, 824.9018013233884], [974.7533424974229, 875.3517850592859], [974.875666812499, 925.3535127158159], [975.4782202270345, 975.3542393971596]]

#"""

#print(init_coord)
#print("\n")

#####################################################

from_bottom_left = [0] * N

for i in range(0,N):
        from_bottom_left[i] = init_coord[i][0]+init_coord[i][1]
    
nodes = {} #intialize labels

for i in range(0, N):
        nodes[i]=copy.deepcopy(init_coord[from_bottom_left.index(sorted(from_bottom_left)[i])]) # n.b. these are static labels and will not change from here on out

pos=copy.deepcopy(nodes)

# this is where distance_matrix used to be defined

distance_dict={}
for i in nodes:
        for j in nodes:
                distance_dict[(i,j)]=distance_matrix[i][j]

#####################################################

# probability functions... try C=temp*step((300-0.73*N)-d)*(1-(d/1415))**3 and D=temp*step(300-0.73*N)*(d/1415)**0.4

def C(i,j):
        d=distance_matrix[i][j]
        return temp*step(200-d)*(1-(d/1415))**3
        #return 0.5        # 1-(1/(1+math.exp(-(d-400)/50)))

def D(i,j):
        d=distance_matrix[i][j]
        return temp*(d/1415)**0.4
        #return 0.5              # 1/(1+math.exp(-(d-400)/50))

#####################################################

def findNearest(i,n): # returns a list of labels of the n nodes nearest node i
        d=[]
        for j in range(0,N):
                d.append([(i,j),distance_dict[(i,j)]])
        d=sorted(d, key=lambda a: a[1])
        d=d[1:n+1]
        q=[]
        for i in range(0,len(d)):
                q.append(d[i][0][1])
        return q

#####################################################
"""
graph={0:[1]}
for i in range(1,N):
        graph[i]=findNearest(i,2)

for i in range(0,N):
        for j in range(0,N):
                if i in graph[j] and j not in graph[i]:
                        graph[i].append(j)
        if i in graph[i]:
                graph[i].remove(i)
        graph[i].sort()
"""
#"""
graph = {0:[1],N-1:[N-2]} #initialize graph

for i in range(1,N-1):
    graph[i]=[i-1,i+1] #initial guess for graph
#"""
#####################################################

def doesEdgeExist(i,j): #does an edge exist from node i to node j
        if j in graph[i]:
                return True
        else:
                return False

def deg(i): # returns degree of node i
        return len(graph[i])

def total_degree():
        z=0
        for i in range(0,N):
                z+=deg(i)
        return z

def dom_thresh(i): # returns the degree threshold node i must exceed to dominate its neighbors
        if deg(i)==0:
                return 1
        else:
                z=0
                for j in graph[i]:
                        z+=deg(j)
                z=z/deg(i)
                return z

def edge_cost(i,j): # returns the cost of the edge between i and j
        if doesEdgeExist(i,j)==False:
                return 0 # if the edge doesn't exist, the cost is 0
        else:
                return distance_matrix[i][j]

def total_edge_cost(i):
        z=0
        for j in graph[i]:
                z+=edge_cost(i,j)
        return z
    
def fitness(i):
        return p1*deg(i)+p2*(deg(i)-dom_thresh(i))-p3*total_edge_cost(i) # currently fitness does not depend on population

def total_fitness():
        z=0
        for j in range(0,N):
                z+=fitness(j)
        return z

#####################################################

for i in nodes:
        nodes[i].append(total_population/N)
        nodes[i].append(fitness(i)) # nodes[i][0] is x-coord, nodes[i][1] is y-coord, nodes[i][2] is population, nodes[i][3] is fitness
        
def population(i): # returns current population of node i
        return nodes[i][2]

best_fitness=total_fitness()
best_graph=copy.deepcopy(graph)

#####################################################

graph_count=1

def perturb(desiredsteps=100):
        for i in range(0,N):
                for j in range(0,N): #findNearest(i,max_degree-1) #range(0,N)
                        PC = random.random()
                        PD = random.random()
                        PK = random.random()
                        global temp
                        global graph_count
                        global graph
                        if PK <= K:
                                graph=copy.deepcopy(best_graph)
                        if PC <= C(i,j) and i!=j and doesEdgeExist(i,j) == False:
                                graph[i]=graph[i]+[j]
                                graph[j]=graph[j]+[i]
                                graph[i].sort()
                                graph[j].sort()
                        if PD <= D(i,j) and i!=j and doesEdgeExist(i,j) == True:
                                graph[i]=[x for x in graph[i] if x != j]
                                graph[j]=[x for x in graph[j] if x != i]
                        if i!=j:
                                temp=temp-(1/(N*N*desiredsteps))
                                graph_count+=1   
                        

#####################################################

for i in range(tries):
        temp=1
        while temp > 0:
                perturb(steps)
                if total_fitness()>best_fitness:
                        best_fitness=total_fitness()
                        best_graph=copy.deepcopy(graph)
#"""
#if best_fitness>100000:
#        print("\n")
#        print(best_graph)
#        print("\n")
#"""
#####################################################

Gf=nx.Graph(graph)
nx.set_node_attributes(Gf,pos,'pos')

G=nx.Graph(best_graph)
nx.set_node_attributes(G,pos,'pos')

#####################################################

def best_total_degree():
    z=0
    for i in best_graph:
        z+=len(best_graph[i])
    return z

#####################################################

dmin=1
ncenter=0
for n in pos:
        x,y=pos[n]
        d=(x-0.5)**2+(y-0.5)**2
        if d<dmin:
                ncenter=n
                dmin=d

p=nx.single_source_shortest_path_length(G,ncenter)

edge_trace = Scatter(
                x=[],
                y=[],
                line=Line(width=0.5,color='#888'),
                hoverinfo='none',
                mode='lines')

for edge in G.edges():
        x0, y0 = G.node[edge[0]]['pos']
        x1, y1 = G.node[edge[1]]['pos']
        edge_trace['x'] += [x0, x1, None]
        edge_trace['y'] += [y0, y1, None]

node_trace = Scatter(
    x=[],
    y=[],
    text=[],
    mode='markers',
    hoverinfo='text',
    marker=Marker(
        showscale=True,
        # colorscale options
        # 'Greys' | 'Greens' | 'Bluered' | 'Hot' | 'Picnic' | 'Portland' |
        # Jet' | 'RdBu' | 'Blackbody' | 'Earth' | 'Electric' | 'YIOrRd' | 'YIGnBu'
        colorscale='Hot',
        reversescale=True,
        color=[],
        size=10,
        colorbar=dict(
            thickness=15,
            title='Node Connections',
            xanchor='left',
            titleside='right'
        ),
        line=dict(width=2)))

for node in G.nodes():
        x, y = G.node[node]['pos']
        node_trace['x'].append(x)
        node_trace['y'].append(y)

for i,j in list(nx.degree(G)):
        node_trace['marker']['color'].append(j)
        node_info = 'Node: '+str(i)+', Degree: '+str(j)
        node_trace['text'].append(node_info)


fig = Figure(data=Data([edge_trace, node_trace]),
             layout=Layout(
                title='<br>Network, N='+str(N)+", P1="+str(p1)+" , P2="+str(p2)+", P3="+str(p3)+", K="+str(K)+", Tries: "+str(tries)+", Temperature resolution: "+str(steps)+", Fitness: "+str(best_fitness),
                titlefont=dict(size=16),
                showlegend=False,
                hovermode='closest',
                margin=dict(b=20,l=5,r=5,t=40),
                annotations=[ dict(
                    text="Python code modified from Plotly example",
                    showarrow=False,
                    xref="paper", yref="paper",
                    x=0.005, y=-0.002 ) ],
                xaxis=XAxis(showgrid=False, zeroline=False, showticklabels=False),
                yaxis=YAxis(showgrid=False, zeroline=False, showticklabels=False)))

py.offline.plot(fig, filename='net_sim '+datetime.datetime.now().strftime("%y-%m-%d-%H-%M-%S")+'.html')

print("END: "+str(datetime.datetime.now()))
print("RUN TIME: "+str(datetime.datetime.now()-start))
print("\n")
print("NODES: "+str(N)+" | TRIES: "+str(tries)+" | TEMPERATURE RESOLUTION: "+str(steps))
print("TOTAL GRAPHS PROCESSED: "+str(graph_count))
print("P1: "+str(p1)+" | P2: "+str(p2)+" | P3: "+str(p3)+" | K: "+str(K))
if best_graph==graph:
        print("FINAL AND BEST SAME? YES")
else:
        print("FINAL AND BEST SAME? NO")
print("FINAL | "+"AVG DEGREE: "+ str(total_degree()/N)+" | TOTAL CYCLES: "+str(len(nx.cycle_basis(Gf))))
print("BEST | "+"AVG DEGREE: "+ str(best_total_degree()/N)+" | TOTAL CYCLES: "+str(len(nx.cycle_basis(G))))
print("     | CYCLES PER NODE: "+str(len(nx.cycle_basis(G))/N))
